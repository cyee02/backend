{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","services_notes","axios","get","then","response","data","id","newObject","put","concat","Footer","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","notesToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","post","value","onChange","console","log","target","type","App_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.42d78946.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = 'api/notes'\n\n// const getAll = () => {\n//     return axios.get(baseUrl)\n// }\n\n// const getAll = () => {\n//     const request = axios.get(baseUrl)\n//     const nonExisting = {\n//       id: 10000,\n//       content: 'This note is not saved to server',\n//       date: '2019-05-30T17:30:31.098Z',\n//       important: true,\n//     }\n//     return request.then(response => response.data.concat(nonExisting))\n// }\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\n// import Course from './components/Course'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport axios from 'axios'\nimport noteService from './services/notes'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  // const hook = () => {\n  //   console.log('effect')\n  //   axios\n  //     .get('http://localhost:3001/notes')\n  //     .then(response => {\n  //       console.log('promise fulfilled')\n  //       setNotes(response.data)\n  //     })\n  // }  \n  // // second parameter specifies how often useEffect is ran\n  // useEffect(hook, []) \n\n    // useEffect(() => {\n  //   console.log('effect')\n  \n  //   const eventHandler = response => {\n  //     console.log('promise fulfilled')\n  //     setNotes(response.data)\n  //   }\n  \n  //   const promise = axios.get('http://localhost:3001/notes')\n  //   promise.then(eventHandler)\n  // }, [])\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(response => {\n        setNotes(response)\n        // console.log(response);\n      })\n  }, [])\n  \n\n  const toggleImportanceOf = id => {\n    // const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    // console.log(\"note in toggleImportanceOf: \", note);\n    const changedNote = {...note, important: !note.important}\n    // console.log(\"changedNote: \", changedNote);\n\n    // axios\n    //   .put(url, changedNote)\n    //   .then (response => {\n    //     setNotes(notes.map(note => \n    //       note.id !== id ? note : response.data\n    //       ))\n    //   })\n    noteService\n      .update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response.data))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    axios\n      .post('https://fierce-castle-69280.herokuapp.com/api/notes', noteObject)\n      .then(response => {\n        // console.log(response);\n        setNotes(notes.concat(noteObject))\n        setErrorMessage(`Added ${noteObject.content}`)\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note \n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n\n// import React, { useState, useEffect } from 'react'\n// import Note from './components/Note'\n// import Notification from './components/Notification'\n// import noteService from './services/notes'\n\n// const Footer = () => {\n//   const footerStyle = {\n//     color: 'green',\n//     fontStyle: 'italic',\n//     fontSize: 16\n//   }\n//   return (\n//     <div style={footerStyle}>\n//       <br />\n//       <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n//     </div>\n//   )\n// }\n\n// const App = () => {\n//   const [notes, setNotes] = useState([]) \n//   const [newNote, setNewNote] = useState('')\n//   const [showAll, setShowAll] = useState(true)\n//   const [errorMessage, setErrorMessage] = useState(null)\n\n//   useEffect(() => {\n//     noteService\n//       .getAll()\n//       .then(initialNotes => {\n//         setNotes(initialNotes)\n//       })\n//   }, [])\n\n//   const addNote = (event) => {\n//     event.preventDefault()\n//     const noteObject = {\n//       content: newNote,\n//       date: new Date().toISOString(),\n//       important: Math.random() > 0.5,\n//       id: notes.length + 1,\n//     }\n  \n//     noteService\n//       .create(noteObject)\n//       .then(returnedNote => {\n//         setNotes(notes.concat(returnedNote))\n//         setNewNote('')\n//       })\n//   }\n\n//   const toggleImportanceOf = (id) => {\n//     const url = `http://localhost:3001/notes/${id}`\n//     const note = notes.find(n => n.id === id)\n//     const changedNote = { ...note, important: !note.important }\n  \n//     noteService\n//       .update(id, changedNote)\n//       .then(returnedNote => {\n//         setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n//       })\n//       .catch(error => {\n//         setErrorMessage(\n//           `Note '${note.content}' was already removed from server`\n//         )\n//         setTimeout(() => {\n//           setErrorMessage(null)\n//         }, 5000)   \n//       })\n//   }\n\n//   const handleNoteChange = (event) => {\n//     setNewNote(event.target.value)\n//   }\n\n//   const notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <Notification message={errorMessage} />\n//       <div>\n//         <button onClick={() => setShowAll(!showAll)}>\n//           show {showAll ? 'important' : 'all' }\n//         </button>\n//       </div>      \n//       <ul>\n//         {notesToShow.map((note, i) => \n//           <Note\n//             key={i}\n//             note={note} \n//             toggleImportance={() => toggleImportanceOf(note.id)}\n//           />\n//         )}\n//       </ul>\n//       <form onSubmit={addNote}>\n//         <input\n//           value={newNote}\n//           onChange={handleNoteChange}\n//         />\n//         <button type=\"submit\">save</button>\n//       </form>\n//       <Footer />\n//     </div>\n//   )\n// }\n\n// export default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}